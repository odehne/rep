'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18010
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="movies")>  _
Partial Public Class MediaLibraryLinqDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblCover(instance As tblCover)
    End Sub
  Partial Private Sub UpdatetblCover(instance As tblCover)
    End Sub
  Partial Private Sub DeletetblCover(instance As tblCover)
    End Sub
  Partial Private Sub InserttblGenre(instance As tblGenre)
    End Sub
  Partial Private Sub UpdatetblGenre(instance As tblGenre)
    End Sub
  Partial Private Sub DeletetblGenre(instance As tblGenre)
    End Sub
  Partial Private Sub InserttblMediaFormat(instance As tblMediaFormat)
    End Sub
  Partial Private Sub UpdatetblMediaFormat(instance As tblMediaFormat)
    End Sub
  Partial Private Sub DeletetblMediaFormat(instance As tblMediaFormat)
    End Sub
  Partial Private Sub InserttblMediaType(instance As tblMediaType)
    End Sub
  Partial Private Sub UpdatetblMediaType(instance As tblMediaType)
    End Sub
  Partial Private Sub DeletetblMediaType(instance As tblMediaType)
    End Sub
  Partial Private Sub InserttblParticipant(instance As tblParticipant)
    End Sub
  Partial Private Sub UpdatetblParticipant(instance As tblParticipant)
    End Sub
  Partial Private Sub DeletetblParticipant(instance As tblParticipant)
    End Sub
  Partial Private Sub InserttblParticipantType(instance As tblParticipantType)
    End Sub
  Partial Private Sub UpdatetblParticipantType(instance As tblParticipantType)
    End Sub
  Partial Private Sub DeletetblParticipantType(instance As tblParticipantType)
    End Sub
  Partial Private Sub InserttblItem(instance As tblItem)
    End Sub
  Partial Private Sub UpdatetblItem(instance As tblItem)
    End Sub
  Partial Private Sub DeletetblItem(instance As tblItem)
    End Sub
  Partial Private Sub InserttblUser(instance As tblUser)
    End Sub
  Partial Private Sub UpdatetblUser(instance As tblUser)
    End Sub
  Partial Private Sub DeletetblUser(instance As tblUser)
    End Sub
  Partial Private Sub InserttblUsersInRole(instance As tblUsersInRole)
    End Sub
  Partial Private Sub UpdatetblUsersInRole(instance As tblUsersInRole)
    End Sub
  Partial Private Sub DeletetblUsersInRole(instance As tblUsersInRole)
    End Sub
  Partial Private Sub InserttblRole(instance As tblRole)
    End Sub
  Partial Private Sub UpdatetblRole(instance As tblRole)
    End Sub
  Partial Private Sub DeletetblRole(instance As tblRole)
    End Sub
  Partial Private Sub InserttblImage(instance As tblImage)
    End Sub
  Partial Private Sub UpdatetblImage(instance As tblImage)
    End Sub
  Partial Private Sub DeletetblImage(instance As tblImage)
    End Sub
  Partial Private Sub InserttblRating(instance As tblRating)
    End Sub
  Partial Private Sub UpdatetblRating(instance As tblRating)
    End Sub
  Partial Private Sub DeletetblRating(instance As tblRating)
    End Sub
  Partial Private Sub InserttblSetting(instance As tblSetting)
    End Sub
  Partial Private Sub UpdatetblSetting(instance As tblSetting)
    End Sub
  Partial Private Sub DeletetblSetting(instance As tblSetting)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("moviesConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblCovers() As System.Data.Linq.Table(Of tblCover)
		Get
			Return Me.GetTable(Of tblCover)
		End Get
	End Property
	
	Public ReadOnly Property tblGenres() As System.Data.Linq.Table(Of tblGenre)
		Get
			Return Me.GetTable(Of tblGenre)
		End Get
	End Property
	
	Public ReadOnly Property tblMediaFormats() As System.Data.Linq.Table(Of tblMediaFormat)
		Get
			Return Me.GetTable(Of tblMediaFormat)
		End Get
	End Property
	
	Public ReadOnly Property tblMediaTypes() As System.Data.Linq.Table(Of tblMediaType)
		Get
			Return Me.GetTable(Of tblMediaType)
		End Get
	End Property
	
	Public ReadOnly Property tblParticipants() As System.Data.Linq.Table(Of tblParticipant)
		Get
			Return Me.GetTable(Of tblParticipant)
		End Get
	End Property
	
	Public ReadOnly Property tblParticipantTypes() As System.Data.Linq.Table(Of tblParticipantType)
		Get
			Return Me.GetTable(Of tblParticipantType)
		End Get
	End Property
	
	Public ReadOnly Property tblItems() As System.Data.Linq.Table(Of tblItem)
		Get
			Return Me.GetTable(Of tblItem)
		End Get
	End Property
	
	Public ReadOnly Property tblUsers() As System.Data.Linq.Table(Of tblUser)
		Get
			Return Me.GetTable(Of tblUser)
		End Get
	End Property
	
	Public ReadOnly Property tblUsersInRoles() As System.Data.Linq.Table(Of tblUsersInRole)
		Get
			Return Me.GetTable(Of tblUsersInRole)
		End Get
	End Property
	
	Public ReadOnly Property tblRoles() As System.Data.Linq.Table(Of tblRole)
		Get
			Return Me.GetTable(Of tblRole)
		End Get
	End Property
	
	Public ReadOnly Property tblImages() As System.Data.Linq.Table(Of tblImage)
		Get
			Return Me.GetTable(Of tblImage)
		End Get
	End Property
	
	Public ReadOnly Property tblRatings() As System.Data.Linq.Table(Of tblRating)
		Get
			Return Me.GetTable(Of tblRating)
		End Get
	End Property
	
	Public ReadOnly Property tblSettings() As System.Data.Linq.Table(Of tblSetting)
		Get
			Return Me.GetTable(Of tblSetting)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCovers")>  _
Partial Public Class tblCover
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ItemID As Integer
	
	Private _Large As System.Data.Linq.Binary
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnLargeChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLargeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemID", DbType:="Int NOT NULL")>  _
	Public Property ItemID() As Integer
		Get
			Return Me._ItemID
		End Get
		Set
			If ((Me._ItemID = value)  _
						= false) Then
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Large", DbType:="VarBinary(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Large() As System.Data.Linq.Binary
		Get
			Return Me._Large
		End Get
		Set
			If (Object.Equals(Me._Large, value) = false) Then
				Me.OnLargeChanging(value)
				Me.SendPropertyChanging
				Me._Large = value
				Me.SendPropertyChanged("Large")
				Me.OnLargeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblGenres")>  _
Partial Public Class tblGenre
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _tblItems As EntitySet(Of tblItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItems = New EntitySet(Of tblItem)(AddressOf Me.attach_tblItems, AddressOf Me.detach_tblItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1024)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblGenre_tblItem", Storage:="_tblItems", ThisKey:="ID", OtherKey:="GenreID")>  _
	Public Property tblItems() As EntitySet(Of tblItem)
		Get
			Return Me._tblItems
		End Get
		Set
			Me._tblItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblGenre = Me
	End Sub
	
	Private Sub detach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblGenre = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMediaFormat")>  _
Partial Public Class tblMediaFormat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _tblItems As EntitySet(Of tblItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItems = New EntitySet(Of tblItem)(AddressOf Me.attach_tblItems, AddressOf Me.detach_tblItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1024)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblMediaFormat_tblItem", Storage:="_tblItems", ThisKey:="ID", OtherKey:="MediaFormatID")>  _
	Public Property tblItems() As EntitySet(Of tblItem)
		Get
			Return Me._tblItems
		End Get
		Set
			Me._tblItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblMediaFormat = Me
	End Sub
	
	Private Sub detach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblMediaFormat = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMediaType")>  _
Partial Public Class tblMediaType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _tblItems As EntitySet(Of tblItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItems = New EntitySet(Of tblItem)(AddressOf Me.attach_tblItems, AddressOf Me.detach_tblItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1024)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblMediaType_tblItem", Storage:="_tblItems", ThisKey:="ID", OtherKey:="MediaTypeID")>  _
	Public Property tblItems() As EntitySet(Of tblItem)
		Get
			Return Me._tblItems
		End Get
		Set
			Me._tblItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblMediaType = Me
	End Sub
	
	Private Sub detach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblMediaType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblParticipants")>  _
Partial Public Class tblParticipant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ParticipantTypeID As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _tblItems As EntitySet(Of tblItem)
	
	Private _tblItems1 As EntitySet(Of tblItem)
	
	Private _tblItems2 As EntitySet(Of tblItem)
	
	Private _tblItems3 As EntitySet(Of tblItem)
	
	Private _tblItems4 As EntitySet(Of tblItem)
	
	Private _tblParticipantType As EntityRef(Of tblParticipantType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnParticipantTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnParticipantTypeIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItems = New EntitySet(Of tblItem)(AddressOf Me.attach_tblItems, AddressOf Me.detach_tblItems)
		Me._tblItems1 = New EntitySet(Of tblItem)(AddressOf Me.attach_tblItems1, AddressOf Me.detach_tblItems1)
		Me._tblItems2 = New EntitySet(Of tblItem)(AddressOf Me.attach_tblItems2, AddressOf Me.detach_tblItems2)
		Me._tblItems3 = New EntitySet(Of tblItem)(AddressOf Me.attach_tblItems3, AddressOf Me.detach_tblItems3)
		Me._tblItems4 = New EntitySet(Of tblItem)(AddressOf Me.attach_tblItems4, AddressOf Me.detach_tblItems4)
		Me._tblParticipantType = CType(Nothing, EntityRef(Of tblParticipantType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParticipantTypeID", DbType:="Int NOT NULL")>  _
	Public Property ParticipantTypeID() As Integer
		Get
			Return Me._ParticipantTypeID
		End Get
		Set
			If ((Me._ParticipantTypeID = value)  _
						= false) Then
				If Me._tblParticipantType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnParticipantTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._ParticipantTypeID = value
				Me.SendPropertyChanged("ParticipantTypeID")
				Me.OnParticipantTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1024)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipant_tblItem", Storage:="_tblItems", ThisKey:="ID", OtherKey:="Actor1ID")>  _
	Public Property tblItems() As EntitySet(Of tblItem)
		Get
			Return Me._tblItems
		End Get
		Set
			Me._tblItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipant_tblItem1", Storage:="_tblItems1", ThisKey:="ID", OtherKey:="Actor2ID")>  _
	Public Property tblItems1() As EntitySet(Of tblItem)
		Get
			Return Me._tblItems1
		End Get
		Set
			Me._tblItems1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipant_tblItem2", Storage:="_tblItems2", ThisKey:="ID", OtherKey:="Actor3ID")>  _
	Public Property tblItems2() As EntitySet(Of tblItem)
		Get
			Return Me._tblItems2
		End Get
		Set
			Me._tblItems2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipant_tblItem3", Storage:="_tblItems3", ThisKey:="ID", OtherKey:="DirectorID")>  _
	Public Property tblItems3() As EntitySet(Of tblItem)
		Get
			Return Me._tblItems3
		End Get
		Set
			Me._tblItems3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipant_tblItem4", Storage:="_tblItems4", ThisKey:="ID", OtherKey:="AuthorID")>  _
	Public Property tblItems4() As EntitySet(Of tblItem)
		Get
			Return Me._tblItems4
		End Get
		Set
			Me._tblItems4.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipantType_tblParticipant", Storage:="_tblParticipantType", ThisKey:="ParticipantTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblParticipantType() As tblParticipantType
		Get
			Return Me._tblParticipantType.Entity
		End Get
		Set
			Dim previousValue As tblParticipantType = Me._tblParticipantType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblParticipantType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblParticipantType.Entity = Nothing
					previousValue.tblParticipants.Remove(Me)
				End If
				Me._tblParticipantType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblParticipants.Add(Me)
					Me._ParticipantTypeID = value.ID
				Else
					Me._ParticipantTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblParticipantType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblParticipant = Me
	End Sub
	
	Private Sub detach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblParticipant = Nothing
	End Sub
	
	Private Sub attach_tblItems1(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblParticipant1 = Me
	End Sub
	
	Private Sub detach_tblItems1(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblParticipant1 = Nothing
	End Sub
	
	Private Sub attach_tblItems2(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblParticipant2 = Me
	End Sub
	
	Private Sub detach_tblItems2(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblParticipant2 = Nothing
	End Sub
	
	Private Sub attach_tblItems3(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblParticipant3 = Me
	End Sub
	
	Private Sub detach_tblItems3(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblParticipant3 = Nothing
	End Sub
	
	Private Sub attach_tblItems4(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblParticipant4 = Me
	End Sub
	
	Private Sub detach_tblItems4(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblParticipant4 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblParticipantType")>  _
Partial Public Class tblParticipantType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _tblParticipants As EntitySet(Of tblParticipant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblParticipants = New EntitySet(Of tblParticipant)(AddressOf Me.attach_tblParticipants, AddressOf Me.detach_tblParticipants)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(1024)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipantType_tblParticipant", Storage:="_tblParticipants", ThisKey:="ID", OtherKey:="ParticipantTypeID")>  _
	Public Property tblParticipants() As EntitySet(Of tblParticipant)
		Get
			Return Me._tblParticipants
		End Get
		Set
			Me._tblParticipants.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblParticipants(ByVal entity As tblParticipant)
		Me.SendPropertyChanging
		entity.tblParticipantType = Me
	End Sub
	
	Private Sub detach_tblParticipants(ByVal entity As tblParticipant)
		Me.SendPropertyChanging
		entity.tblParticipantType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblItems")>  _
Partial Public Class tblItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _MediaTypeID As Integer
	
	Private _MediaFormatID As Integer
	
	Private _GenreID As Integer
	
	Private _AuthorID As System.Nullable(Of Integer)
	
	Private _DirectorID As System.Nullable(Of Integer)
	
	Private _Actor1ID As System.Nullable(Of Integer)
	
	Private _Actor2ID As System.Nullable(Of Integer)
	
	Private _PublishDate As String
	
	Private _EAN As String
	
	Private _OwnerID As System.Nullable(Of Integer)
	
	Private _Description As String
	
	Private _Actor3ID As System.Nullable(Of Integer)
	
	Private _AmazonSalesRank As System.Nullable(Of Integer)
	
	Private _AudienceRank As String
	
	Private _BorrowedByID As System.Nullable(Of Integer)
	
	Private _ASIN As String
	
	Private _SmallImageUrl As String
	
	Private _MediumImageUrl As String
	
	Private _LargeImageUrl As String
	
	Private _BorrowedSince As System.Nullable(Of Date)
	
	Private _BorrowCount As Integer
	
	Private _DateAdded As Date
	
	Private _GenreIDs As String
	
	Private _tblImages As EntitySet(Of tblImage)
	
	Private _tblRatings As EntitySet(Of tblRating)
	
	Private _tblGenre As EntityRef(Of tblGenre)
	
	Private _tblMediaFormat As EntityRef(Of tblMediaFormat)
	
	Private _tblMediaType As EntityRef(Of tblMediaType)
	
	Private _tblParticipant As EntityRef(Of tblParticipant)
	
	Private _tblParticipant1 As EntityRef(Of tblParticipant)
	
	Private _tblParticipant2 As EntityRef(Of tblParticipant)
	
	Private _tblParticipant3 As EntityRef(Of tblParticipant)
	
	Private _tblUser As EntityRef(Of tblUser)
	
	Private _tblUser1 As EntityRef(Of tblUser)
	
	Private _tblParticipant4 As EntityRef(Of tblParticipant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnMediaTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMediaTypeIDChanged()
    End Sub
    Partial Private Sub OnMediaFormatIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMediaFormatIDChanged()
    End Sub
    Partial Private Sub OnGenreIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGenreIDChanged()
    End Sub
    Partial Private Sub OnAuthorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAuthorIDChanged()
    End Sub
    Partial Private Sub OnDirectorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDirectorIDChanged()
    End Sub
    Partial Private Sub OnActor1IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnActor1IDChanged()
    End Sub
    Partial Private Sub OnActor2IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnActor2IDChanged()
    End Sub
    Partial Private Sub OnPublishDateChanging(value As String)
    End Sub
    Partial Private Sub OnPublishDateChanged()
    End Sub
    Partial Private Sub OnEANChanging(value As String)
    End Sub
    Partial Private Sub OnEANChanged()
    End Sub
    Partial Private Sub OnOwnerIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOwnerIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnActor3IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnActor3IDChanged()
    End Sub
    Partial Private Sub OnAmazonSalesRankChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAmazonSalesRankChanged()
    End Sub
    Partial Private Sub OnAudienceRankChanging(value As String)
    End Sub
    Partial Private Sub OnAudienceRankChanged()
    End Sub
    Partial Private Sub OnBorrowedByIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBorrowedByIDChanged()
    End Sub
    Partial Private Sub OnASINChanging(value As String)
    End Sub
    Partial Private Sub OnASINChanged()
    End Sub
    Partial Private Sub OnSmallImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnSmallImageUrlChanged()
    End Sub
    Partial Private Sub OnMediumImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnMediumImageUrlChanged()
    End Sub
    Partial Private Sub OnLargeImageUrlChanging(value As String)
    End Sub
    Partial Private Sub OnLargeImageUrlChanged()
    End Sub
    Partial Private Sub OnBorrowedSinceChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBorrowedSinceChanged()
    End Sub
    Partial Private Sub OnBorrowCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnBorrowCountChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnGenreIDsChanging(value As String)
    End Sub
    Partial Private Sub OnGenreIDsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblImages = New EntitySet(Of tblImage)(AddressOf Me.attach_tblImages, AddressOf Me.detach_tblImages)
		Me._tblRatings = New EntitySet(Of tblRating)(AddressOf Me.attach_tblRatings, AddressOf Me.detach_tblRatings)
		Me._tblGenre = CType(Nothing, EntityRef(Of tblGenre))
		Me._tblMediaFormat = CType(Nothing, EntityRef(Of tblMediaFormat))
		Me._tblMediaType = CType(Nothing, EntityRef(Of tblMediaType))
		Me._tblParticipant = CType(Nothing, EntityRef(Of tblParticipant))
		Me._tblParticipant1 = CType(Nothing, EntityRef(Of tblParticipant))
		Me._tblParticipant2 = CType(Nothing, EntityRef(Of tblParticipant))
		Me._tblParticipant3 = CType(Nothing, EntityRef(Of tblParticipant))
		Me._tblUser = CType(Nothing, EntityRef(Of tblUser))
		Me._tblUser1 = CType(Nothing, EntityRef(Of tblUser))
		Me._tblParticipant4 = CType(Nothing, EntityRef(Of tblParticipant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MediaTypeID", DbType:="Int NOT NULL")>  _
	Public Property MediaTypeID() As Integer
		Get
			Return Me._MediaTypeID
		End Get
		Set
			If ((Me._MediaTypeID = value)  _
						= false) Then
				If Me._tblMediaType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMediaTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._MediaTypeID = value
				Me.SendPropertyChanged("MediaTypeID")
				Me.OnMediaTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MediaFormatID", DbType:="Int NOT NULL")>  _
	Public Property MediaFormatID() As Integer
		Get
			Return Me._MediaFormatID
		End Get
		Set
			If ((Me._MediaFormatID = value)  _
						= false) Then
				If Me._tblMediaFormat.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMediaFormatIDChanging(value)
				Me.SendPropertyChanging
				Me._MediaFormatID = value
				Me.SendPropertyChanged("MediaFormatID")
				Me.OnMediaFormatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GenreID", DbType:="Int NOT NULL")>  _
	Public Property GenreID() As Integer
		Get
			Return Me._GenreID
		End Get
		Set
			If ((Me._GenreID = value)  _
						= false) Then
				If Me._tblGenre.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnGenreIDChanging(value)
				Me.SendPropertyChanging
				Me._GenreID = value
				Me.SendPropertyChanged("GenreID")
				Me.OnGenreIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthorID", DbType:="Int")>  _
	Public Property AuthorID() As System.Nullable(Of Integer)
		Get
			Return Me._AuthorID
		End Get
		Set
			If (Me._AuthorID.Equals(value) = false) Then
				If Me._tblParticipant4.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAuthorIDChanging(value)
				Me.SendPropertyChanging
				Me._AuthorID = value
				Me.SendPropertyChanged("AuthorID")
				Me.OnAuthorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DirectorID", DbType:="Int")>  _
	Public Property DirectorID() As System.Nullable(Of Integer)
		Get
			Return Me._DirectorID
		End Get
		Set
			If (Me._DirectorID.Equals(value) = false) Then
				If Me._tblParticipant3.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDirectorIDChanging(value)
				Me.SendPropertyChanging
				Me._DirectorID = value
				Me.SendPropertyChanged("DirectorID")
				Me.OnDirectorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Actor1ID", DbType:="Int")>  _
	Public Property Actor1ID() As System.Nullable(Of Integer)
		Get
			Return Me._Actor1ID
		End Get
		Set
			If (Me._Actor1ID.Equals(value) = false) Then
				If Me._tblParticipant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnActor1IDChanging(value)
				Me.SendPropertyChanging
				Me._Actor1ID = value
				Me.SendPropertyChanged("Actor1ID")
				Me.OnActor1IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Actor2ID", DbType:="Int")>  _
	Public Property Actor2ID() As System.Nullable(Of Integer)
		Get
			Return Me._Actor2ID
		End Get
		Set
			If (Me._Actor2ID.Equals(value) = false) Then
				If Me._tblParticipant1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnActor2IDChanging(value)
				Me.SendPropertyChanging
				Me._Actor2ID = value
				Me.SendPropertyChanged("Actor2ID")
				Me.OnActor2IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublishDate", DbType:="NVarChar(50)")>  _
	Public Property PublishDate() As String
		Get
			Return Me._PublishDate
		End Get
		Set
			If (String.Equals(Me._PublishDate, value) = false) Then
				Me.OnPublishDateChanging(value)
				Me.SendPropertyChanging
				Me._PublishDate = value
				Me.SendPropertyChanged("PublishDate")
				Me.OnPublishDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EAN", DbType:="NVarChar(13)")>  _
	Public Property EAN() As String
		Get
			Return Me._EAN
		End Get
		Set
			If (String.Equals(Me._EAN, value) = false) Then
				Me.OnEANChanging(value)
				Me.SendPropertyChanging
				Me._EAN = value
				Me.SendPropertyChanged("EAN")
				Me.OnEANChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerID", DbType:="Int")>  _
	Public Property OwnerID() As System.Nullable(Of Integer)
		Get
			Return Me._OwnerID
		End Get
		Set
			If (Me._OwnerID.Equals(value) = false) Then
				If Me._tblUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOwnerIDChanging(value)
				Me.SendPropertyChanging
				Me._OwnerID = value
				Me.SendPropertyChanged("OwnerID")
				Me.OnOwnerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Actor3ID", DbType:="Int")>  _
	Public Property Actor3ID() As System.Nullable(Of Integer)
		Get
			Return Me._Actor3ID
		End Get
		Set
			If (Me._Actor3ID.Equals(value) = false) Then
				If Me._tblParticipant2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnActor3IDChanging(value)
				Me.SendPropertyChanging
				Me._Actor3ID = value
				Me.SendPropertyChanged("Actor3ID")
				Me.OnActor3IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmazonSalesRank", DbType:="Int")>  _
	Public Property AmazonSalesRank() As System.Nullable(Of Integer)
		Get
			Return Me._AmazonSalesRank
		End Get
		Set
			If (Me._AmazonSalesRank.Equals(value) = false) Then
				Me.OnAmazonSalesRankChanging(value)
				Me.SendPropertyChanging
				Me._AmazonSalesRank = value
				Me.SendPropertyChanged("AmazonSalesRank")
				Me.OnAmazonSalesRankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AudienceRank", DbType:="NVarChar(255)")>  _
	Public Property AudienceRank() As String
		Get
			Return Me._AudienceRank
		End Get
		Set
			If (String.Equals(Me._AudienceRank, value) = false) Then
				Me.OnAudienceRankChanging(value)
				Me.SendPropertyChanging
				Me._AudienceRank = value
				Me.SendPropertyChanged("AudienceRank")
				Me.OnAudienceRankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BorrowedByID", DbType:="Int")>  _
	Public Property BorrowedByID() As System.Nullable(Of Integer)
		Get
			Return Me._BorrowedByID
		End Get
		Set
			If (Me._BorrowedByID.Equals(value) = false) Then
				If Me._tblUser1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBorrowedByIDChanging(value)
				Me.SendPropertyChanging
				Me._BorrowedByID = value
				Me.SendPropertyChanged("BorrowedByID")
				Me.OnBorrowedByIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ASIN", DbType:="NVarChar(50)")>  _
	Public Property ASIN() As String
		Get
			Return Me._ASIN
		End Get
		Set
			If (String.Equals(Me._ASIN, value) = false) Then
				Me.OnASINChanging(value)
				Me.SendPropertyChanging
				Me._ASIN = value
				Me.SendPropertyChanged("ASIN")
				Me.OnASINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmallImageUrl", DbType:="NVarChar(255)")>  _
	Public Property SmallImageUrl() As String
		Get
			Return Me._SmallImageUrl
		End Get
		Set
			If (String.Equals(Me._SmallImageUrl, value) = false) Then
				Me.OnSmallImageUrlChanging(value)
				Me.SendPropertyChanging
				Me._SmallImageUrl = value
				Me.SendPropertyChanged("SmallImageUrl")
				Me.OnSmallImageUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MediumImageUrl", DbType:="NVarChar(255)")>  _
	Public Property MediumImageUrl() As String
		Get
			Return Me._MediumImageUrl
		End Get
		Set
			If (String.Equals(Me._MediumImageUrl, value) = false) Then
				Me.OnMediumImageUrlChanging(value)
				Me.SendPropertyChanging
				Me._MediumImageUrl = value
				Me.SendPropertyChanged("MediumImageUrl")
				Me.OnMediumImageUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImageUrl", DbType:="NVarChar(255)")>  _
	Public Property LargeImageUrl() As String
		Get
			Return Me._LargeImageUrl
		End Get
		Set
			If (String.Equals(Me._LargeImageUrl, value) = false) Then
				Me.OnLargeImageUrlChanging(value)
				Me.SendPropertyChanging
				Me._LargeImageUrl = value
				Me.SendPropertyChanged("LargeImageUrl")
				Me.OnLargeImageUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BorrowedSince", DbType:="DateTime")>  _
	Public Property BorrowedSince() As System.Nullable(Of Date)
		Get
			Return Me._BorrowedSince
		End Get
		Set
			If (Me._BorrowedSince.Equals(value) = false) Then
				Me.OnBorrowedSinceChanging(value)
				Me.SendPropertyChanging
				Me._BorrowedSince = value
				Me.SendPropertyChanged("BorrowedSince")
				Me.OnBorrowedSinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BorrowCount", DbType:="Int Not Null")>  _
	Public Property BorrowCount() As Integer
		Get
			Return Me._BorrowCount
		End Get
		Set
			If ((Me._BorrowCount = value)  _
						= false) Then
				Me.OnBorrowCountChanging(value)
				Me.SendPropertyChanging
				Me._BorrowCount = value
				Me.SendPropertyChanged("BorrowCount")
				Me.OnBorrowCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="datetime Not NULL")>  _
	Public Property DateAdded() As Date
		Get
			Return Me._DateAdded
		End Get
		Set
			If ((Me._DateAdded = value)  _
						= false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GenreIDs", DbType:="NVarChar(200)")>  _
	Public Property GenreIDs() As String
		Get
			Return Me._GenreIDs
		End Get
		Set
			If (String.Equals(Me._GenreIDs, value) = false) Then
				Me.OnGenreIDsChanging(value)
				Me.SendPropertyChanging
				Me._GenreIDs = value
				Me.SendPropertyChanged("GenreIDs")
				Me.OnGenreIDsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblImage", Storage:="_tblImages", ThisKey:="ID", OtherKey:="ItemID")>  _
	Public Property tblImages() As EntitySet(Of tblImage)
		Get
			Return Me._tblImages
		End Get
		Set
			Me._tblImages.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblRating", Storage:="_tblRatings", ThisKey:="ID", OtherKey:="ItemID")>  _
	Public Property tblRatings() As EntitySet(Of tblRating)
		Get
			Return Me._tblRatings
		End Get
		Set
			Me._tblRatings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblGenre_tblItem", Storage:="_tblGenre", ThisKey:="GenreID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblGenre() As tblGenre
		Get
			Return Me._tblGenre.Entity
		End Get
		Set
			Dim previousValue As tblGenre = Me._tblGenre.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblGenre.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblGenre.Entity = Nothing
					previousValue.tblItems.Remove(Me)
				End If
				Me._tblGenre.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItems.Add(Me)
					Me._GenreID = value.ID
				Else
					Me._GenreID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblGenre")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblMediaFormat_tblItem", Storage:="_tblMediaFormat", ThisKey:="MediaFormatID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblMediaFormat() As tblMediaFormat
		Get
			Return Me._tblMediaFormat.Entity
		End Get
		Set
			Dim previousValue As tblMediaFormat = Me._tblMediaFormat.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblMediaFormat.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblMediaFormat.Entity = Nothing
					previousValue.tblItems.Remove(Me)
				End If
				Me._tblMediaFormat.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItems.Add(Me)
					Me._MediaFormatID = value.ID
				Else
					Me._MediaFormatID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblMediaFormat")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblMediaType_tblItem", Storage:="_tblMediaType", ThisKey:="MediaTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblMediaType() As tblMediaType
		Get
			Return Me._tblMediaType.Entity
		End Get
		Set
			Dim previousValue As tblMediaType = Me._tblMediaType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblMediaType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblMediaType.Entity = Nothing
					previousValue.tblItems.Remove(Me)
				End If
				Me._tblMediaType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItems.Add(Me)
					Me._MediaTypeID = value.ID
				Else
					Me._MediaTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblMediaType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipant_tblItem", Storage:="_tblParticipant", ThisKey:="Actor1ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblParticipant() As tblParticipant
		Get
			Return Me._tblParticipant.Entity
		End Get
		Set
			Dim previousValue As tblParticipant = Me._tblParticipant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblParticipant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblParticipant.Entity = Nothing
					previousValue.tblItems.Remove(Me)
				End If
				Me._tblParticipant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItems.Add(Me)
					Me._Actor1ID = value.ID
				Else
					Me._Actor1ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblParticipant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipant_tblItem1", Storage:="_tblParticipant1", ThisKey:="Actor2ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblParticipant1() As tblParticipant
		Get
			Return Me._tblParticipant1.Entity
		End Get
		Set
			Dim previousValue As tblParticipant = Me._tblParticipant1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblParticipant1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblParticipant1.Entity = Nothing
					previousValue.tblItems1.Remove(Me)
				End If
				Me._tblParticipant1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItems1.Add(Me)
					Me._Actor2ID = value.ID
				Else
					Me._Actor2ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblParticipant1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipant_tblItem2", Storage:="_tblParticipant2", ThisKey:="Actor3ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblParticipant2() As tblParticipant
		Get
			Return Me._tblParticipant2.Entity
		End Get
		Set
			Dim previousValue As tblParticipant = Me._tblParticipant2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblParticipant2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblParticipant2.Entity = Nothing
					previousValue.tblItems2.Remove(Me)
				End If
				Me._tblParticipant2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItems2.Add(Me)
					Me._Actor3ID = value.ID
				Else
					Me._Actor3ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblParticipant2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipant_tblItem3", Storage:="_tblParticipant3", ThisKey:="DirectorID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblParticipant3() As tblParticipant
		Get
			Return Me._tblParticipant3.Entity
		End Get
		Set
			Dim previousValue As tblParticipant = Me._tblParticipant3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblParticipant3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblParticipant3.Entity = Nothing
					previousValue.tblItems3.Remove(Me)
				End If
				Me._tblParticipant3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItems3.Add(Me)
					Me._DirectorID = value.ID
				Else
					Me._DirectorID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblParticipant3")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblItem", Storage:="_tblUser", ThisKey:="OwnerID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblUser() As tblUser
		Get
			Return Me._tblUser.Entity
		End Get
		Set
			Dim previousValue As tblUser = Me._tblUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblUser.Entity = Nothing
					previousValue.tblItems.Remove(Me)
				End If
				Me._tblUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItems.Add(Me)
					Me._OwnerID = value.ID
				Else
					Me._OwnerID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblUser")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblItem1", Storage:="_tblUser1", ThisKey:="BorrowedByID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblUser1() As tblUser
		Get
			Return Me._tblUser1.Entity
		End Get
		Set
			Dim previousValue As tblUser = Me._tblUser1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblUser1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblUser1.Entity = Nothing
					previousValue.tblItems1.Remove(Me)
				End If
				Me._tblUser1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItems1.Add(Me)
					Me._BorrowedByID = value.ID
				Else
					Me._BorrowedByID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblUser1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblParticipant_tblItem4", Storage:="_tblParticipant4", ThisKey:="AuthorID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblParticipant4() As tblParticipant
		Get
			Return Me._tblParticipant4.Entity
		End Get
		Set
			Dim previousValue As tblParticipant = Me._tblParticipant4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblParticipant4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblParticipant4.Entity = Nothing
					previousValue.tblItems4.Remove(Me)
				End If
				Me._tblParticipant4.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblItems4.Add(Me)
					Me._AuthorID = value.ID
				Else
					Me._AuthorID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblParticipant4")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblImages(ByVal entity As tblImage)
		Me.SendPropertyChanging
		entity.tblItem = Me
	End Sub
	
	Private Sub detach_tblImages(ByVal entity As tblImage)
		Me.SendPropertyChanging
		entity.tblItem = Nothing
	End Sub
	
	Private Sub attach_tblRatings(ByVal entity As tblRating)
		Me.SendPropertyChanging
		entity.tblItem = Me
	End Sub
	
	Private Sub detach_tblRatings(ByVal entity As tblRating)
		Me.SendPropertyChanging
		entity.tblItem = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUsers")>  _
Partial Public Class tblUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Email As String
	
	Private _Description As String
	
	Private _Password As String
	
	Private _Username As String
	
	Private _Fon As String
	
	Private _ApplicationName As String
	
	Private _PasswordQuestion As String
	
	Private _PasswordAnswer As String
	
	Private _IsApproved As Boolean
	
	Private _IsOnLine As Boolean
	
	Private _IsLockedOut As Boolean
	
	Private _LastActivityDate As System.Nullable(Of Date)
	
	Private _LastLoginDate As System.Nullable(Of Date)
	
	Private _LastPasswordChangedDate As System.Nullable(Of Date)
	
	Private _CreationDate As System.Nullable(Of Date)
	
	Private _LastLockedOutDate As System.Nullable(Of Date)
	
	Private _FailedPasswordAttemptWindowStart As System.Nullable(Of Date)
	
	Private _FailedPasswordAnswerAttemptWindowStart As System.Nullable(Of Date)
	
	Private _FailureCount As Integer
	
	Private _FailedPasswordAttemptCount As Integer
	
	Private _FailedPasswordAnswerAttemptCount As Integer
	
	Private _tblItems As EntitySet(Of tblItem)
	
	Private _tblItems1 As EntitySet(Of tblItem)
	
	Private _tblUsersInRoles As EntitySet(Of tblUsersInRole)
	
	Private _tblRatings As EntitySet(Of tblRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnFonChanging(value As String)
    End Sub
    Partial Private Sub OnFonChanged()
    End Sub
    Partial Private Sub OnApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationNameChanged()
    End Sub
    Partial Private Sub OnPasswordQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordQuestionChanged()
    End Sub
    Partial Private Sub OnPasswordAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordAnswerChanged()
    End Sub
    Partial Private Sub OnIsApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsApprovedChanged()
    End Sub
    Partial Private Sub OnIsOnLineChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsOnLineChanged()
    End Sub
    Partial Private Sub OnIsLockedOutChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsLockedOutChanged()
    End Sub
    Partial Private Sub OnLastActivityDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastActivityDateChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanged()
    End Sub
    Partial Private Sub OnCreationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreationDateChanged()
    End Sub
    Partial Private Sub OnLastLockedOutDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastLockedOutDateChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnFailureCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailureCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItems = New EntitySet(Of tblItem)(AddressOf Me.attach_tblItems, AddressOf Me.detach_tblItems)
		Me._tblItems1 = New EntitySet(Of tblItem)(AddressOf Me.attach_tblItems1, AddressOf Me.detach_tblItems1)
		Me._tblUsersInRoles = New EntitySet(Of tblUsersInRole)(AddressOf Me.attach_tblUsersInRoles, AddressOf Me.detach_tblUsersInRoles)
		Me._tblRatings = New EntitySet(Of tblRating)(AddressOf Me.attach_tblRatings, AddressOf Me.detach_tblRatings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(50)", CanBeNull:=false)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fon", DbType:="NVarChar(25)")>  _
	Public Property Fon() As String
		Get
			Return Me._Fon
		End Get
		Set
			If (String.Equals(Me._Fon, value) = false) Then
				Me.OnFonChanging(value)
				Me.SendPropertyChanging
				Me._Fon = value
				Me.SendPropertyChanged("Fon")
				Me.OnFonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(255)")>  _
	Public Property ApplicationName() As String
		Get
			Return Me._ApplicationName
		End Get
		Set
			If (String.Equals(Me._ApplicationName, value) = false) Then
				Me.OnApplicationNameChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationName = value
				Me.SendPropertyChanged("ApplicationName")
				Me.OnApplicationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordQuestion", DbType:="NVarChar(255)")>  _
	Public Property PasswordQuestion() As String
		Get
			Return Me._PasswordQuestion
		End Get
		Set
			If (String.Equals(Me._PasswordQuestion, value) = false) Then
				Me.OnPasswordQuestionChanging(value)
				Me.SendPropertyChanging
				Me._PasswordQuestion = value
				Me.SendPropertyChanged("PasswordQuestion")
				Me.OnPasswordQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordAnswer", DbType:="NVarChar(255)")>  _
	Public Property PasswordAnswer() As String
		Get
			Return Me._PasswordAnswer
		End Get
		Set
			If (String.Equals(Me._PasswordAnswer, value) = false) Then
				Me.OnPasswordAnswerChanging(value)
				Me.SendPropertyChanging
				Me._PasswordAnswer = value
				Me.SendPropertyChanged("PasswordAnswer")
				Me.OnPasswordAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsApproved", DbType:="Bit")>  _
	Public Property IsApproved() As Boolean
		Get
			Return Me._IsApproved
		End Get
		Set
			If ((Me._IsApproved = value)  _
						= false) Then
				Me.OnIsApprovedChanging(value)
				Me.SendPropertyChanging
				Me._IsApproved = value
				Me.SendPropertyChanged("IsApproved")
				Me.OnIsApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOnLine", DbType:="Bit")>  _
	Public Property IsOnLine() As Boolean
		Get
			Return Me._IsOnLine
		End Get
		Set
			If ((Me._IsOnLine = value)  _
						= false) Then
				Me.OnIsOnLineChanging(value)
				Me.SendPropertyChanging
				Me._IsOnLine = value
				Me.SendPropertyChanged("IsOnLine")
				Me.OnIsOnLineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLockedOut", DbType:="Bit")>  _
	Public Property IsLockedOut() As Boolean
		Get
			Return Me._IsLockedOut
		End Get
		Set
			If ((Me._IsLockedOut = value)  _
						= false) Then
				Me.OnIsLockedOutChanging(value)
				Me.SendPropertyChanging
				Me._IsLockedOut = value
				Me.SendPropertyChanged("IsLockedOut")
				Me.OnIsLockedOutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime")>  _
	Public Property LastActivityDate() As System.Nullable(Of Date)
		Get
			Return Me._LastActivityDate
		End Get
		Set
			If (Me._LastActivityDate.Equals(value) = false) Then
				Me.OnLastActivityDateChanging(value)
				Me.SendPropertyChanging
				Me._LastActivityDate = value
				Me.SendPropertyChanged("LastActivityDate")
				Me.OnLastActivityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime")>  _
	Public Property LastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (Me._LastLoginDate.Equals(value) = false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastPasswordChangedDate", DbType:="DateTime")>  _
	Public Property LastPasswordChangedDate() As System.Nullable(Of Date)
		Get
			Return Me._LastPasswordChangedDate
		End Get
		Set
			If (Me._LastPasswordChangedDate.Equals(value) = false) Then
				Me.OnLastPasswordChangedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastPasswordChangedDate = value
				Me.SendPropertyChanged("LastPasswordChangedDate")
				Me.OnLastPasswordChangedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreationDate", DbType:="DateTime")>  _
	Public Property CreationDate() As System.Nullable(Of Date)
		Get
			Return Me._CreationDate
		End Get
		Set
			If (Me._CreationDate.Equals(value) = false) Then
				Me.OnCreationDateChanging(value)
				Me.SendPropertyChanging
				Me._CreationDate = value
				Me.SendPropertyChanged("CreationDate")
				Me.OnCreationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLockedOutDate", DbType:="DateTime")>  _
	Public Property LastLockedOutDate() As System.Nullable(Of Date)
		Get
			Return Me._LastLockedOutDate
		End Get
		Set
			If (Me._LastLockedOutDate.Equals(value) = false) Then
				Me.OnLastLockedOutDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLockedOutDate = value
				Me.SendPropertyChanged("LastLockedOutDate")
				Me.OnLastLockedOutDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptWindowStart", DbType:="DateTime")>  _
	Public Property FailedPasswordAttemptWindowStart() As System.Nullable(Of Date)
		Get
			Return Me._FailedPasswordAttemptWindowStart
		End Get
		Set
			If (Me._FailedPasswordAttemptWindowStart.Equals(value) = false) Then
				Me.OnFailedPasswordAttemptWindowStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptWindowStart = value
				Me.SendPropertyChanged("FailedPasswordAttemptWindowStart")
				Me.OnFailedPasswordAttemptWindowStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptWindowStart", DbType:="DateTime")>  _
	Public Property FailedPasswordAnswerAttemptWindowStart() As System.Nullable(Of Date)
		Get
			Return Me._FailedPasswordAnswerAttemptWindowStart
		End Get
		Set
			If (Me._FailedPasswordAnswerAttemptWindowStart.Equals(value) = false) Then
				Me.OnFailedPasswordAnswerAttemptWindowStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptWindowStart = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart")
				Me.OnFailedPasswordAnswerAttemptWindowStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailureCount", DbType:="Int")>  _
	Public Property FailureCount() As Integer
		Get
			Return Me._FailureCount
		End Get
		Set
			If ((Me._FailureCount = value)  _
						= false) Then
				Me.OnFailureCountChanging(value)
				Me.SendPropertyChanging
				Me._FailureCount = value
				Me.SendPropertyChanged("FailureCount")
				Me.OnFailureCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptCount", DbType:="Int")>  _
	Public Property FailedPasswordAttemptCount() As Integer
		Get
			Return Me._FailedPasswordAttemptCount
		End Get
		Set
			If ((Me._FailedPasswordAttemptCount = value)  _
						= false) Then
				Me.OnFailedPasswordAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAttemptCount")
				Me.OnFailedPasswordAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptCount", DbType:="Int")>  _
	Public Property FailedPasswordAnswerAttemptCount() As Integer
		Get
			Return Me._FailedPasswordAnswerAttemptCount
		End Get
		Set
			If ((Me._FailedPasswordAnswerAttemptCount = value)  _
						= false) Then
				Me.OnFailedPasswordAnswerAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptCount")
				Me.OnFailedPasswordAnswerAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblItem", Storage:="_tblItems", ThisKey:="ID", OtherKey:="OwnerID")>  _
	Public Property tblItems() As EntitySet(Of tblItem)
		Get
			Return Me._tblItems
		End Get
		Set
			Me._tblItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblItem1", Storage:="_tblItems1", ThisKey:="ID", OtherKey:="BorrowedByID")>  _
	Public Property tblItems1() As EntitySet(Of tblItem)
		Get
			Return Me._tblItems1
		End Get
		Set
			Me._tblItems1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblUsersInRole", Storage:="_tblUsersInRoles", ThisKey:="Username", OtherKey:="UserName")>  _
	Public Property tblUsersInRoles() As EntitySet(Of tblUsersInRole)
		Get
			Return Me._tblUsersInRoles
		End Get
		Set
			Me._tblUsersInRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblRating", Storage:="_tblRatings", ThisKey:="ID", OtherKey:="UserID")>  _
	Public Property tblRatings() As EntitySet(Of tblRating)
		Get
			Return Me._tblRatings
		End Get
		Set
			Me._tblRatings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblUser = Me
	End Sub
	
	Private Sub detach_tblItems(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblUser = Nothing
	End Sub
	
	Private Sub attach_tblItems1(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblUser1 = Me
	End Sub
	
	Private Sub detach_tblItems1(ByVal entity As tblItem)
		Me.SendPropertyChanging
		entity.tblUser1 = Nothing
	End Sub
	
	Private Sub attach_tblUsersInRoles(ByVal entity As tblUsersInRole)
		Me.SendPropertyChanging
		entity.tblUser = Me
	End Sub
	
	Private Sub detach_tblUsersInRoles(ByVal entity As tblUsersInRole)
		Me.SendPropertyChanging
		entity.tblUser = Nothing
	End Sub
	
	Private Sub attach_tblRatings(ByVal entity As tblRating)
		Me.SendPropertyChanging
		entity.tblUser = Me
	End Sub
	
	Private Sub detach_tblRatings(ByVal entity As tblRating)
		Me.SendPropertyChanging
		entity.tblUser = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUsersInRoles")>  _
Partial Public Class tblUsersInRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _UserName As String
	
	Private _RoleName As String
	
	Private _ApplicationName As String
	
	Private _tblRole As EntityRef(Of tblRole)
	
	Private _tblUser As EntityRef(Of tblUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    Partial Private Sub OnApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblRole = CType(Nothing, EntityRef(Of tblRole))
		Me._tblUser = CType(Nothing, EntityRef(Of tblUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				If Me._tblUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				If Me._tblRole.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleNameChanging(value)
				Me.SendPropertyChanging
				Me._RoleName = value
				Me.SendPropertyChanged("RoleName")
				Me.OnRoleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ApplicationName() As String
		Get
			Return Me._ApplicationName
		End Get
		Set
			If (String.Equals(Me._ApplicationName, value) = false) Then
				Me.OnApplicationNameChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationName = value
				Me.SendPropertyChanged("ApplicationName")
				Me.OnApplicationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblRole_tblUsersInRole", Storage:="_tblRole", ThisKey:="RoleName", OtherKey:="Rolename", IsForeignKey:=true)>  _
	Public Property tblRole() As tblRole
		Get
			Return Me._tblRole.Entity
		End Get
		Set
			Dim previousValue As tblRole = Me._tblRole.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblRole.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblRole.Entity = Nothing
					previousValue.tblUsersInRoles.Remove(Me)
				End If
				Me._tblRole.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblUsersInRoles.Add(Me)
					Me._RoleName = value.Rolename
				Else
					Me._RoleName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblRole")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblUsersInRole", Storage:="_tblUser", ThisKey:="UserName", OtherKey:="Username", IsForeignKey:=true)>  _
	Public Property tblUser() As tblUser
		Get
			Return Me._tblUser.Entity
		End Get
		Set
			Dim previousValue As tblUser = Me._tblUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblUser.Entity = Nothing
					previousValue.tblUsersInRoles.Remove(Me)
				End If
				Me._tblUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblUsersInRoles.Add(Me)
					Me._UserName = value.Username
				Else
					Me._UserName = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRoles")>  _
Partial Public Class tblRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Rolename As String
	
	Private _ApplicationName As String
	
	Private _tblUsersInRoles As EntitySet(Of tblUsersInRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnRolenameChanging(value As String)
    End Sub
    Partial Private Sub OnRolenameChanged()
    End Sub
    Partial Private Sub OnApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblUsersInRoles = New EntitySet(Of tblUsersInRole)(AddressOf Me.attach_tblUsersInRoles, AddressOf Me.detach_tblUsersInRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rolename", DbType:="NVarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property Rolename() As String
		Get
			Return Me._Rolename
		End Get
		Set
			If (String.Equals(Me._Rolename, value) = false) Then
				Me.OnRolenameChanging(value)
				Me.SendPropertyChanging
				Me._Rolename = value
				Me.SendPropertyChanged("Rolename")
				Me.OnRolenameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ApplicationName() As String
		Get
			Return Me._ApplicationName
		End Get
		Set
			If (String.Equals(Me._ApplicationName, value) = false) Then
				Me.OnApplicationNameChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationName = value
				Me.SendPropertyChanged("ApplicationName")
				Me.OnApplicationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblRole_tblUsersInRole", Storage:="_tblUsersInRoles", ThisKey:="Rolename", OtherKey:="RoleName")>  _
	Public Property tblUsersInRoles() As EntitySet(Of tblUsersInRole)
		Get
			Return Me._tblUsersInRoles
		End Get
		Set
			Me._tblUsersInRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblUsersInRoles(ByVal entity As tblUsersInRole)
		Me.SendPropertyChanging
		entity.tblRole = Me
	End Sub
	
	Private Sub detach_tblUsersInRoles(ByVal entity As tblUsersInRole)
		Me.SendPropertyChanging
		entity.tblRole = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblImages")>  _
Partial Public Class tblImage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ItemID As Integer
	
	Private _SmallImage As System.Data.Linq.Binary
	
	Private _MediumImage As System.Data.Linq.Binary
	
	Private _LargeImage As System.Data.Linq.Binary
	
	Private _tblItem As EntityRef(Of tblItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnSmallImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSmallImageChanged()
    End Sub
    Partial Private Sub OnMediumImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnMediumImageChanged()
    End Sub
    Partial Private Sub OnLargeImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnLargeImageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItem = CType(Nothing, EntityRef(Of tblItem))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemID", DbType:="Int NOT NULL")>  _
	Public Property ItemID() As Integer
		Get
			Return Me._ItemID
		End Get
		Set
			If ((Me._ItemID = value)  _
						= false) Then
				If Me._tblItem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmallImage", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SmallImage() As System.Data.Linq.Binary
		Get
			Return Me._SmallImage
		End Get
		Set
			If (Object.Equals(Me._SmallImage, value) = false) Then
				Me.OnSmallImageChanging(value)
				Me.SendPropertyChanging
				Me._SmallImage = value
				Me.SendPropertyChanged("SmallImage")
				Me.OnSmallImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MediumImage", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MediumImage() As System.Data.Linq.Binary
		Get
			Return Me._MediumImage
		End Get
		Set
			If (Object.Equals(Me._MediumImage, value) = false) Then
				Me.OnMediumImageChanging(value)
				Me.SendPropertyChanging
				Me._MediumImage = value
				Me.SendPropertyChanged("MediumImage")
				Me.OnMediumImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LargeImage", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LargeImage() As System.Data.Linq.Binary
		Get
			Return Me._LargeImage
		End Get
		Set
			If (Object.Equals(Me._LargeImage, value) = false) Then
				Me.OnLargeImageChanging(value)
				Me.SendPropertyChanging
				Me._LargeImage = value
				Me.SendPropertyChanged("LargeImage")
				Me.OnLargeImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblImage", Storage:="_tblItem", ThisKey:="ItemID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblItem() As tblItem
		Get
			Return Me._tblItem.Entity
		End Get
		Set
			Dim previousValue As tblItem = Me._tblItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblItem.Entity = Nothing
					previousValue.tblImages.Remove(Me)
				End If
				Me._tblItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblImages.Add(Me)
					Me._ItemID = value.ID
				Else
					Me._ItemID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblItem")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblRatings")>  _
Partial Public Class tblRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _ItemID As Integer
	
	Private _UserID As Integer
	
	Private _Comment As String
	
	Private _Rating As Integer
	
	Private _Subject As String
	
	Private _tblItem As EntityRef(Of tblItem)
	
	Private _tblUser As EntityRef(Of tblUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnItemIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnItemIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnRatingChanging(value As Integer)
    End Sub
    Partial Private Sub OnRatingChanged()
    End Sub
    Partial Private Sub OnSubjectChanging(value As String)
    End Sub
    Partial Private Sub OnSubjectChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblItem = CType(Nothing, EntityRef(Of tblItem))
		Me._tblUser = CType(Nothing, EntityRef(Of tblUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemID", DbType:="Int NOT NULL")>  _
	Public Property ItemID() As Integer
		Get
			Return Me._ItemID
		End Get
		Set
			If ((Me._ItemID = value)  _
						= false) Then
				If Me._tblItem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnItemIDChanging(value)
				Me.SendPropertyChanging
				Me._ItemID = value
				Me.SendPropertyChanged("ItemID")
				Me.OnItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int NOT NULL")>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				If Me._tblUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NVarChar(500)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rating", DbType:="Int NOT NULL")>  _
	Public Property Rating() As Integer
		Get
			Return Me._Rating
		End Get
		Set
			If ((Me._Rating = value)  _
						= false) Then
				Me.OnRatingChanging(value)
				Me.SendPropertyChanging
				Me._Rating = value
				Me.SendPropertyChanged("Rating")
				Me.OnRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject", DbType:="NVarChar(500)")>  _
	Public Property Subject() As String
		Get
			Return Me._Subject
		End Get
		Set
			If (String.Equals(Me._Subject, value) = false) Then
				Me.OnSubjectChanging(value)
				Me.SendPropertyChanging
				Me._Subject = value
				Me.SendPropertyChanged("Subject")
				Me.OnSubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblItem_tblRating", Storage:="_tblItem", ThisKey:="ItemID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblItem() As tblItem
		Get
			Return Me._tblItem.Entity
		End Get
		Set
			Dim previousValue As tblItem = Me._tblItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblItem.Entity = Nothing
					previousValue.tblRatings.Remove(Me)
				End If
				Me._tblItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblRatings.Add(Me)
					Me._ItemID = value.ID
				Else
					Me._ItemID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblItem")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblRating", Storage:="_tblUser", ThisKey:="UserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property tblUser() As tblUser
		Get
			Return Me._tblUser.Entity
		End Get
		Set
			Dim previousValue As tblUser = Me._tblUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblUser.Entity = Nothing
					previousValue.tblRatings.Remove(Me)
				End If
				Me._tblUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblRatings.Add(Me)
					Me._UserID = value.ID
				Else
					Me._UserID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSettings")>  _
Partial Public Class tblSetting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Updated As Date
	
	Private _Name As String
	
	Private _Value As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUpdatedChanging(value As Date)
    End Sub
    Partial Private Sub OnUpdatedChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Updated", DbType:="DateTime NOT NULL")>  _
	Public Property Updated() As Date
		Get
			Return Me._Updated
		End Get
		Set
			If ((Me._Updated = value)  _
						= false) Then
				Me.OnUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._Updated = value
				Me.SendPropertyChanged("Updated")
				Me.OnUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(150)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="NVarChar(2048)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
